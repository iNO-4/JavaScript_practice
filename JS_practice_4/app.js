// 同じコードを何度も記述することは非効率な上に処理の内容を変更する際、複数の箇所を修正する必要がある。
// 「関数」は同じコードを何度も記述する手間を省略し、処理を簡単に見やすくできる。
// 「関数」は、同じ処理をひとまとめにして再利用しやすくする方法。

// 「関数(function)」は、繰り返し使われる一連の処理を１つにまとめるもの。
// 関数の形で定義しておき、毎回同じプログラムを書く代わりに、この関数を呼び出すことで処理を実行する。
// 最も簡単な関数は、以下のように記述する。
// function 関数名(){
//   処理内容
// }
// JSでは、functionに続けて関数名を書き、{}内に処理内容を記述する。

// 関数において入力する値を「引数」、出力される値を「戻り値」という。
// 関数に引数を渡したいときは、()内に引数を書く。
// 引数は「,」で繫ぐことで複数の指定も可能になる。

// function 関数名(引数){
//   処理
//   return 戻り値;
// }
// この関数の結果を出力したいときは、return内に戻り値を渡す。こうすると、関数の処理結果が呼び出し元から利用できる。


// メイン部分
var alertString;
alertString = addString("WebCamp");

// 作成した関数を呼び出す
alert(alertString);

function addString(strA){ // functionの後に、関数名「addString」を記述し、引数として「strA」を定義している。
	var addStr = "Hello " + strA; // 変数名「addStr」に、「Hello 」の文字列と、関数の引数「strA」に設定されている文字列を結合している。
	return addStr; // 結合結果の格納された「addStr」を、関数の戻り値としている。returnを記述することで、出力結果が表示される。
} // これで、与えられた引数を基にして、特定の文字列を結合する関数が作成できる。
// アラートウィンドウに「Hello WebCamp」の文字が表示され、関数を正しく呼び出すことができる。
